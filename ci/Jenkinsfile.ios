library 'status-jenkins-lib@v1.7.0'

pipeline {
  agent { label 'macos && nix-2.11 && aarch64' }

  options {
    timestamps()
    /* Prevent Jenkins jobs from running forever */
    timeout(time: 30, unit: 'MINUTES')
    /* Go requires a certain directory structure */
    checkoutToSubdirectory('src/github.com/waku-org/go-waku')
    /* Limit builds retained */
    buildDiscarder(logRotator(
      numToKeepStr: '10',
      daysToKeepStr: '20',
      artifactNumToKeepStr: '10',
    ))
    /* Allows combined build to copy */
    copyArtifactPermission('/go-waku/*')
  }

  environment {
    TARGET  = 'ios'
    REPO    = "${env.WORKSPACE}/src/github.com/waku-org/go-waku"
    GOCACHE = "${env.WORKSPACE_TMP}/go-build"
    GOPATH  = "${env.WORKSPACE}"
    PATH    = "${env.PATH}:${env.GOPATH}/bin"
  }

  stages {

    stage('Prep') { steps { script { dir(env.REPO) {
      env.ARTIFACT = "${env.REPO}/pkg/" + utils.pkgFilename(
        name: "go-waku",
        type: "ios",
        ext: "tar.gz"
      )
      sh 'make install-gomobile'
    } } } }

    stage('Build') {
      steps { script { dir(env.REPO) {
        nix.develop('which xcodebuild', pure: false)
        nix.develop('make mobile-ios', pure: false)
      } } }
    }

    stage('Package') {
      steps { dir(env.REPO) {
        dir('build/lib') {
          sh 'tar -czvf gowaku-ios.tar.gz Gowaku.xcframework'
          sh "cp gowaku-ios.tar.gz ${env.ARTIFACT}"
        }
      } }
    }
   
    stage('Parallel Upload') {
      parallel {
        stage('Archive') {
          steps { script {
            archiveArtifacts(env.ARTIFACT.minus("${env.WORKSPACE}/"))
          } }
        }
        stage('Upload') {
          steps { script {
            env.PKG_URL = s3.uploadArtifact(env.ARTIFACT)
            jenkins.setBuildDesc(ios: env.PKG_URL)
          } }
        }
      }
    }
  }
  post {
    success { script { github.notifyPR(true) } }
    failure { script { github.notifyPR(false) } }
    always { cleanWs() }
  }
}
