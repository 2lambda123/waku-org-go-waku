// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: waku_filter_v2.proto

// 12/WAKU2-FILTER rfc: https://rfc.vac.dev/spec/12/

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FilterSubscribeRequest_FilterSubscribeType int32

const (
	FilterSubscribeRequest_SUBSCRIBER_PING FilterSubscribeRequest_FilterSubscribeType = 0
	FilterSubscribeRequest_SUBSCRIBE       FilterSubscribeRequest_FilterSubscribeType = 1
	FilterSubscribeRequest_UNSUBSCRIBE     FilterSubscribeRequest_FilterSubscribeType = 2
	FilterSubscribeRequest_UNSUBSCRIBE_ALL FilterSubscribeRequest_FilterSubscribeType = 3
)

var FilterSubscribeRequest_FilterSubscribeType_name = map[int32]string{
	0: "SUBSCRIBER_PING",
	1: "SUBSCRIBE",
	2: "UNSUBSCRIBE",
	3: "UNSUBSCRIBE_ALL",
}

var FilterSubscribeRequest_FilterSubscribeType_value = map[string]int32{
	"SUBSCRIBER_PING": 0,
	"SUBSCRIBE":       1,
	"UNSUBSCRIBE":     2,
	"UNSUBSCRIBE_ALL": 3,
}

func (x FilterSubscribeRequest_FilterSubscribeType) String() string {
	return proto.EnumName(FilterSubscribeRequest_FilterSubscribeType_name, int32(x))
}

func (FilterSubscribeRequest_FilterSubscribeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_22975a4bb50808e9, []int{0, 0}
}

// Protocol identifier: /vac/waku/filter-subscribe/2.0.0-beta1
type FilterSubscribeRequest struct {
	RequestId           string                                     `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	FilterSubscribeType FilterSubscribeRequest_FilterSubscribeType `protobuf:"varint,2,opt,name=filter_subscribe_type,json=filterSubscribeType,proto3,enum=pb.FilterSubscribeRequest_FilterSubscribeType" json:"filter_subscribe_type,omitempty"`
	// Filter criteria
	PubsubTopic          string   `protobuf:"bytes,10,opt,name=pubsub_topic,json=pubsubTopic,proto3" json:"pubsub_topic,omitempty"`
	ContentTopics        []string `protobuf:"bytes,11,rep,name=content_topics,json=contentTopics,proto3" json:"content_topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilterSubscribeRequest) Reset()         { *m = FilterSubscribeRequest{} }
func (m *FilterSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*FilterSubscribeRequest) ProtoMessage()    {}
func (*FilterSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_22975a4bb50808e9, []int{0}
}
func (m *FilterSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterSubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilterSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterSubscribeRequest.Merge(m, src)
}
func (m *FilterSubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *FilterSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FilterSubscribeRequest proto.InternalMessageInfo

func (m *FilterSubscribeRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *FilterSubscribeRequest) GetFilterSubscribeType() FilterSubscribeRequest_FilterSubscribeType {
	if m != nil {
		return m.FilterSubscribeType
	}
	return FilterSubscribeRequest_SUBSCRIBER_PING
}

func (m *FilterSubscribeRequest) GetPubsubTopic() string {
	if m != nil {
		return m.PubsubTopic
	}
	return ""
}

func (m *FilterSubscribeRequest) GetContentTopics() []string {
	if m != nil {
		return m.ContentTopics
	}
	return nil
}

type FilterSubscribeResponse struct {
	RequestId            string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	StatusCode           uint32   `protobuf:"varint,10,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusDesc           string   `protobuf:"bytes,11,opt,name=status_desc,json=statusDesc,proto3" json:"status_desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilterSubscribeResponse) Reset()         { *m = FilterSubscribeResponse{} }
func (m *FilterSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*FilterSubscribeResponse) ProtoMessage()    {}
func (*FilterSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_22975a4bb50808e9, []int{1}
}
func (m *FilterSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilterSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilterSubscribeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilterSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterSubscribeResponse.Merge(m, src)
}
func (m *FilterSubscribeResponse) XXX_Size() int {
	return m.Size()
}
func (m *FilterSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FilterSubscribeResponse proto.InternalMessageInfo

func (m *FilterSubscribeResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *FilterSubscribeResponse) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *FilterSubscribeResponse) GetStatusDesc() string {
	if m != nil {
		return m.StatusDesc
	}
	return ""
}

// Protocol identifier: /vac/waku/filter-push/2.0.0-beta1
type MessagePushV2 struct {
	WakuMessage          *WakuMessage `protobuf:"bytes,1,opt,name=waku_message,json=wakuMessage,proto3" json:"waku_message,omitempty"`
	PubsubTopic          string       `protobuf:"bytes,2,opt,name=pubsub_topic,json=pubsubTopic,proto3" json:"pubsub_topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MessagePushV2) Reset()         { *m = MessagePushV2{} }
func (m *MessagePushV2) String() string { return proto.CompactTextString(m) }
func (*MessagePushV2) ProtoMessage()    {}
func (*MessagePushV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_22975a4bb50808e9, []int{2}
}
func (m *MessagePushV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessagePushV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessagePushV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessagePushV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessagePushV2.Merge(m, src)
}
func (m *MessagePushV2) XXX_Size() int {
	return m.Size()
}
func (m *MessagePushV2) XXX_DiscardUnknown() {
	xxx_messageInfo_MessagePushV2.DiscardUnknown(m)
}

var xxx_messageInfo_MessagePushV2 proto.InternalMessageInfo

func (m *MessagePushV2) GetWakuMessage() *WakuMessage {
	if m != nil {
		return m.WakuMessage
	}
	return nil
}

func (m *MessagePushV2) GetPubsubTopic() string {
	if m != nil {
		return m.PubsubTopic
	}
	return ""
}

func init() {
	proto.RegisterEnum("pb.FilterSubscribeRequest_FilterSubscribeType", FilterSubscribeRequest_FilterSubscribeType_name, FilterSubscribeRequest_FilterSubscribeType_value)
	proto.RegisterType((*FilterSubscribeRequest)(nil), "pb.FilterSubscribeRequest")
	proto.RegisterType((*FilterSubscribeResponse)(nil), "pb.FilterSubscribeResponse")
	proto.RegisterType((*MessagePushV2)(nil), "pb.MessagePushV2")
}

func init() { proto.RegisterFile("waku_filter_v2.proto", fileDescriptor_22975a4bb50808e9) }

var fileDescriptor_22975a4bb50808e9 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xdd, 0x6e, 0xda, 0x30,
	0x14, 0x80, 0x49, 0x90, 0x26, 0xe5, 0x84, 0x40, 0x64, 0xf6, 0x13, 0x4d, 0x5a, 0xc6, 0x22, 0x4d,
	0xe2, 0x2a, 0x17, 0xd9, 0x13, 0x0c, 0xf6, 0x23, 0x24, 0x86, 0x90, 0x81, 0xed, 0xd2, 0x8a, 0x13,
	0xb3, 0x45, 0xac, 0xc4, 0x8d, 0xed, 0x22, 0xfa, 0x24, 0x7d, 0xa2, 0xaa, 0x97, 0x7d, 0x84, 0x8a,
	0xbe, 0x48, 0x85, 0x93, 0x16, 0xd4, 0x20, 0xf5, 0x2e, 0xf9, 0xfc, 0x9d, 0x73, 0x7c, 0xce, 0x31,
	0xbc, 0xde, 0xc4, 0x2b, 0x45, 0x96, 0xd9, 0x7f, 0xc9, 0x0a, 0x72, 0x11, 0x85, 0xbc, 0xc8, 0x65,
	0x8e, 0x4c, 0x4e, 0xdf, 0x23, 0x7d, 0x72, 0xc6, 0x84, 0x88, 0xff, 0xb2, 0x92, 0x07, 0xd7, 0x26,
	0xbc, 0xfd, 0xa1, 0xdd, 0x99, 0xa2, 0x22, 0x29, 0x32, 0xca, 0x30, 0x3b, 0x57, 0x4c, 0x48, 0xf4,
	0x01, 0xa0, 0x28, 0x3f, 0x49, 0x96, 0x7a, 0x46, 0xcf, 0xe8, 0x5b, 0xd8, 0xaa, 0xc8, 0x28, 0x45,
	0x14, 0xde, 0x54, 0x45, 0xc4, 0x63, 0x24, 0x91, 0x5b, 0xce, 0x3c, 0xb3, 0x67, 0xf4, 0xdb, 0x51,
	0x18, 0x72, 0x1a, 0x9e, 0xce, 0xfc, 0x1c, 0xcf, 0xb7, 0x9c, 0xe1, 0xee, 0xb2, 0x0e, 0xd1, 0x27,
	0x68, 0x71, 0x45, 0x85, 0xa2, 0x44, 0xe6, 0x3c, 0x4b, 0x3c, 0xd0, 0x97, 0xb0, 0x4b, 0x36, 0xdf,
	0x23, 0xf4, 0x19, 0xda, 0x49, 0xbe, 0x96, 0x6c, 0x2d, 0x4b, 0x47, 0x78, 0x76, 0xaf, 0xd9, 0xb7,
	0xb0, 0x53, 0x51, 0x6d, 0x89, 0x80, 0x40, 0xf7, 0x44, 0x55, 0xd4, 0x85, 0xce, 0x6c, 0x31, 0x98,
	0x0d, 0xf1, 0x68, 0xf0, 0x1d, 0x93, 0xe9, 0x68, 0xf2, 0xd3, 0x6d, 0x20, 0x07, 0xac, 0x27, 0xe8,
	0x1a, 0xa8, 0x03, 0xf6, 0x62, 0x72, 0x00, 0xe6, 0x3e, 0xe8, 0x08, 0x90, 0xaf, 0xe3, 0xb1, 0xdb,
	0x0c, 0x2e, 0xe1, 0x5d, 0xad, 0x5b, 0xc1, 0xf3, 0xb5, 0x60, 0x2f, 0x0d, 0xf2, 0x23, 0xd8, 0x42,
	0xc6, 0x52, 0x09, 0x92, 0xe4, 0x29, 0xd3, 0x3d, 0x3a, 0x18, 0x4a, 0x34, 0xcc, 0x53, 0x76, 0x24,
	0xa4, 0x4c, 0x24, 0x9e, 0xad, 0x13, 0x54, 0xc2, 0x37, 0x26, 0x92, 0x60, 0x09, 0xce, 0xaf, 0x72,
	0xab, 0x53, 0x25, 0xfe, 0xfd, 0x8e, 0x50, 0x04, 0xad, 0xe3, 0x5d, 0xeb, 0x9a, 0x76, 0xd4, 0xd9,
	0xaf, 0xe4, 0x4f, 0xbc, 0x52, 0x95, 0x8c, 0xed, 0xcd, 0xe1, 0xa7, 0x36, 0x6b, 0xb3, 0x36, 0xeb,
	0x81, 0x7b, 0xb3, 0xf3, 0x8d, 0xdb, 0x9d, 0x6f, 0xdc, 0xed, 0x7c, 0xe3, 0xea, 0xde, 0x6f, 0xd0,
	0x57, 0xfa, 0x15, 0x7d, 0x79, 0x08, 0x00, 0x00, 0xff, 0xff, 0xae, 0xd4, 0x6f, 0xea, 0x75, 0x02,
	0x00, 0x00,
}

func (m *FilterSubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterSubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterSubscribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContentTopics) > 0 {
		for iNdEx := len(m.ContentTopics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContentTopics[iNdEx])
			copy(dAtA[i:], m.ContentTopics[iNdEx])
			i = encodeVarintWakuFilterV2(dAtA, i, uint64(len(m.ContentTopics[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.PubsubTopic) > 0 {
		i -= len(m.PubsubTopic)
		copy(dAtA[i:], m.PubsubTopic)
		i = encodeVarintWakuFilterV2(dAtA, i, uint64(len(m.PubsubTopic)))
		i--
		dAtA[i] = 0x52
	}
	if m.FilterSubscribeType != 0 {
		i = encodeVarintWakuFilterV2(dAtA, i, uint64(m.FilterSubscribeType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintWakuFilterV2(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FilterSubscribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilterSubscribeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilterSubscribeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StatusDesc) > 0 {
		i -= len(m.StatusDesc)
		copy(dAtA[i:], m.StatusDesc)
		i = encodeVarintWakuFilterV2(dAtA, i, uint64(len(m.StatusDesc)))
		i--
		dAtA[i] = 0x5a
	}
	if m.StatusCode != 0 {
		i = encodeVarintWakuFilterV2(dAtA, i, uint64(m.StatusCode))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintWakuFilterV2(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessagePushV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessagePushV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessagePushV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PubsubTopic) > 0 {
		i -= len(m.PubsubTopic)
		copy(dAtA[i:], m.PubsubTopic)
		i = encodeVarintWakuFilterV2(dAtA, i, uint64(len(m.PubsubTopic)))
		i--
		dAtA[i] = 0x12
	}
	if m.WakuMessage != nil {
		{
			size, err := m.WakuMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWakuFilterV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWakuFilterV2(dAtA []byte, offset int, v uint64) int {
	offset -= sovWakuFilterV2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FilterSubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovWakuFilterV2(uint64(l))
	}
	if m.FilterSubscribeType != 0 {
		n += 1 + sovWakuFilterV2(uint64(m.FilterSubscribeType))
	}
	l = len(m.PubsubTopic)
	if l > 0 {
		n += 1 + l + sovWakuFilterV2(uint64(l))
	}
	if len(m.ContentTopics) > 0 {
		for _, s := range m.ContentTopics {
			l = len(s)
			n += 1 + l + sovWakuFilterV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FilterSubscribeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovWakuFilterV2(uint64(l))
	}
	if m.StatusCode != 0 {
		n += 1 + sovWakuFilterV2(uint64(m.StatusCode))
	}
	l = len(m.StatusDesc)
	if l > 0 {
		n += 1 + l + sovWakuFilterV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessagePushV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WakuMessage != nil {
		l = m.WakuMessage.Size()
		n += 1 + l + sovWakuFilterV2(uint64(l))
	}
	l = len(m.PubsubTopic)
	if l > 0 {
		n += 1 + l + sovWakuFilterV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWakuFilterV2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWakuFilterV2(x uint64) (n int) {
	return sovWakuFilterV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FilterSubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWakuFilterV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterSubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterSubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWakuFilterV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterSubscribeType", wireType)
			}
			m.FilterSubscribeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWakuFilterV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilterSubscribeType |= FilterSubscribeRequest_FilterSubscribeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubsubTopic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWakuFilterV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubsubTopic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentTopics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWakuFilterV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentTopics = append(m.ContentTopics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWakuFilterV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilterSubscribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWakuFilterV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilterSubscribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilterSubscribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWakuFilterV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWakuFilterV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWakuFilterV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWakuFilterV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessagePushV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWakuFilterV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessagePushV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessagePushV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WakuMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWakuFilterV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WakuMessage == nil {
				m.WakuMessage = &WakuMessage{}
			}
			if err := m.WakuMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubsubTopic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWakuFilterV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubsubTopic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWakuFilterV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWakuFilterV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWakuFilterV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWakuFilterV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWakuFilterV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWakuFilterV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWakuFilterV2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWakuFilterV2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWakuFilterV2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWakuFilterV2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWakuFilterV2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWakuFilterV2 = fmt.Errorf("proto: unexpected end of group")
)
